# Agent UI Project Intelligence for this project

## Component Structure

- UI components are placed in src/components/ui/
- Common utility components are in src/components/common/
- Application-specific components are in src/components/application/
- InputChat has its own dedicated directory at src/components/InputChat/
- New components should follow the existing pattern of their category

## Styling Conventions

- Use Tailwind CSS v4 for all styling
- Follow existing class naming patterns for consistency
- Use the class-variance-authority pattern for component variants
- Use clsx and tailwind-merge for class composition
- Prefer utility classes over custom CSS when possible
- Use CSS variables for theme colors (--primary-color, --secondary-color, etc.)
- Plan for dark/light theme support with next-themes

## File Structure

- React components use .tsx extension
- API routes are placed in src/app/api/
- Real-time features are in src/app/realtime/
- Utility and server functions go in src/lib/
- The core component and funcionality is on src/components/InputChat
- Use Next.js 15.3.1 App Router conventions

## Code Conventions

- Use TypeScript 5 for type safety
- Use React 19 functional components with hooks
- Use 'use client' directive for client-side components
- Follow existing error handling patterns
- Use async/await for asynchronous operations
- Use PulseLoader from react-spinners for loading states
- Use Turbopack for improved development experience

## UI/UX Preferences

- Clean, minimal design aesthetic
- Responsive layouts that work on all device sizes
- Loading states for all asynchronous operations
- Smooth animations for transitions
- Clear error messages for failed operations
- Use FadeInText component for animated text display
- Use Sonner for toast notifications

## API Patterns

- Use Next.js API routes for backend functionality
- Use fetch API for client-side requests
- Follow established error handling patterns
- Structure API requests with consistent JSON formatting
- Use the n8nWebhook API for external service communication
- Use OpenAI API for direct model communication
- Format responses using the FormatMarkdown component

## Component Patterns

- InputChat main component manages user input and API communication
- FormatMarkdown component handles rich text display with syntax highlighting
- FadeInText component provides animated text display
- Message responses follow a standardized format with lc, type, id, and kwargs properties
- Handle both text responses and image responses (via base64 encoding)
- Use conditional rendering for different response types
- Use Radix UI primitives for advanced UI components

## Project Workflow

- Implement core functionality first before adding enhancements
- Maintain consistency with existing patterns
- Focus on user experience and visual polish
- Ensure responsive design works on multiple devices
- Test on both mobile and desktop viewports
- Optimize for performance across all devices
